<h1>Hello, Rails!</h1>
<p> Welcome to our Rails blog, navigate to the articles via the sidebar on the left, or read our README below.</p>

<h1> README </h1>

<h2>Abstract</h2>
<p> We went through the 'create a blog' tutorial, added bootstrap, and populated  our database using Rails' seeds feature. You'll find bootsrap buttons and form components, as well as the use of the grid system in our application layout. The sidebar hold a link to our blog's home page, and we used the welcome index as the README. We did about half of the tutorial individually, at that point we pair programmed the rest of it, as well as the adding of bootsrap and the seeding of our database. </p>

<h2>Software Overview</h2>
<p>The great thing about ruby on rails is that it's so catered towards an MVC architecture. We genereated our models and controllers using rails, and created routes and views as necessary. We used database migration and seeding as well as enabling addiotional gems within the Gemfile. We had to enable RubyRacer gem to get our servers running properly on localhost.</p>

<h2>Individual Contributions</h2>
<p> Since we pair programming from the second-half of the tutorial onward, we equally contributed to the adding of bootstrap and seeding our database. We discussed ruby helper syntax as we completed the tutorial.</p>

<h2>Summary</h2>
<p>This project only really worked as a pair-programming assignment with a partner. It would of been much harder to contribute individually. The toughest hang-up we had was figuring out how to run the server on our VMs. The instructions in the assignment and in the lecture slides were lacking in that department. It was also not specified how we should merge our ruby project with our existing code on the repo. In the end, it was cool to get our feet wet with ruby on rails, especially since we're doing our final project in it. We think we deserve a superior grade because our blog functions, looks good, and is populated with articles via the seeding feature of rails.</p>
